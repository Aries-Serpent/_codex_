minimum_pre_commit_version: "3.7.0"
default_install_hook_types: [pre-commit, pre-push, prepare-commit-msg, commit-msg]
exclude: '^\\.codex/'
default_language_version:
  python: python3
repos:
  - repo: local
    hooks:
      - id: mypy
        name: MyPy (Static Typing)
        entry: mypy
        language: system
        pass_filenames: true
        types: [python]
        args: ["--config-file=pyproject.toml"]
      - id: security-audit
        name: Pip Audit (Offline Vulnerability Scan)
        entry: python tools/pip_audit_wrapper.py --offline
        language: system
        pass_filenames: false
        stages: [manual]
      - id: validate-fences
        name: validate markdown code fences
        # Ensure the validator knows it is running *inside* pre-commit to avoid
        # delegating back to `pre-commit run ...` and recursing.
        entry: bash
        language: system
        args:
          - -lc
          - 'PRE_COMMIT=1 python tools/validate_fences.py --strict-inner "$@"'
          # Provide a placeholder for $0 so the first filename is preserved in "$@".
          - validate-fences
        pass_filenames: true
        types: [markdown]
        exclude: '^tests/data/validate_fences_sample\.md$'
        stages: [pre-commit]
      - id: block-env-files
        name: block committed secret env files
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -lc
          - |
            while IFS= read -r path; do
              if [ -z "$path" ]; then
                continue
              fi

              base="$(basename "$path")"
              if [ "$base" = ".env.example" ]; then
                continue
              fi

              case "$base" in
                .env|.env.*|.envrc|.envrc.*|*.secret|*.secrets|*.vault)
                  echo "[secrets] refusing to commit $path"
                  echo "Create a local copy from .env.example instead of committing secrets."
                  exit 1
                  ;;
              esac
            done < <(git diff --cached --name-only --diff-filter=ACM)
        stages: [pre-commit]
      - id: codex-block-large-generated
        name: Block large generated files in .codex
        entry: python tools/precommit_block_large.py
        language: system
        pass_filenames: true
        stages: [pre-commit]
      - id: check-licenses
        name: check licenses
        entry: python scripts/check_licenses.py
        language: system
        pass_filenames: false
        stages: [pre-commit]
      - id: ci-guard
        name: Guard against unintended CI workflows
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -lc
          - |
            if [ "${CODEX_ALLOW_CI:-0}" = "1" ]; then
              python tools/ci_guard.py
            else
              echo "[ci-guard] skipped (set CODEX_ALLOW_CI=1 to run)"
            fi
        stages: [pre-commit]
      - id: prepare-commit-scaffold
        name: Prepare commit message scaffold
        entry: python tools/prepare_commit_msg.py
        language: system
        pass_filenames: false
        stages: [prepare-commit-msg]
      - id: conventional-commit-lint
        name: Conventional Commit message lint
        entry: python tools/commit_msg_lint.py
        language: system
        pass_filenames: false
        stages: [commit-msg]
      - id: prepush-tests
        name: Fast test gate before push
        entry: python tools/prepush_tests.py
        language: system
        pass_filenames: false
        stages: [pre-push]
      - id: llm-auto-fix
        name: Codex LLM auto-fix orchestrator
        entry: python tools/llm_auto_fix.py
        language: system
        pass_filenames: false
        stages: [manual]
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-merge-conflict
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-yaml
      - id: check-toml
      - id: pretty-format-json
        args: ["--autofix"]
      - id: check-added-large-files
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        stages: [pre-commit]
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        args: ["--fix"]
        stages: [pre-commit]
      - id: ruff-format
        stages: [pre-commit]
  - repo: https://github.com/kynan/nbstripout
    rev: 0.8.1
    hooks:
      - id: nbstripout
        files: ^notebooks/.*\.ipynb$
  # Heavy security scanning hooks are available manually (or via CI) to
  # avoid slowing routine local commits; opt in with `pre-commit run --hook-stage manual`.
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: Bandit Security Checks
        args: ["-q", "-ll", "-c", ".bandit.yml", "--exclude", "tests"]
        files: ^(src/|tools/)
        stages: [manual]
  - repo: https://github.com/returntocorp/semgrep
    rev: v1.67.0
    hooks:
      - id: semgrep
        name: Semgrep Security Audit (local rules, offline-friendly)
        args:
          - "--config"
          - "semgrep_rules/"
          - "--metrics=off"
          - "--disable-version-check"
        files: ^(src/|tools/)
        stages: [pre-commit]
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]
        stages: [pre-commit]
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        args: ["--progress-spinner", "off", "--dry-run"]
        stages: [manual]
