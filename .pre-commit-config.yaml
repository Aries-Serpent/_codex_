minimum_pre_commit_version: "3.7.0"
default_install_hook_types: [pre-commit, pre-push, prepare-commit-msg]
exclude: '^\.codex/'
repos:
  - repo: local
    hooks:
      - id: ruff
        name: ruff (lint)
        entry: ruff
        language: system
        pass_filenames: true
        types: [python]
        args: ["check"]
      - id: black
        name: black (check)
        entry: black
        language: system
        pass_filenames: true
        types: [python]
        args: ["--check", "--diff"]
      - id: mypy
        name: mypy (types)
        entry: bash
        language: system
        pass_filenames: true
        types: [python]
        args:
          - -lc
          - |
            if command -v mypy >/dev/null 2>&1; then
              mypy --config-file=pyproject.toml "$@" || echo "[mypy] completed with non-zero status"
            else
              echo "[mypy] skipping (mypy not installed)"
            fi
      - id: pytest
        name: pytest (quick)
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -lc
          - pytest -q tests/test_safety.py tests/cli/test_generate_safety.py
      - id: git-secrets
        name: git-secrets scan
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -lc
          - |
            if command -v git-secrets >/dev/null 2>&1; then
              git secrets --scan
            else
              echo "[git-secrets] skipping (git-secrets not installed)"
            fi
      - id: validate-fences
        name: validate markdown fences
        entry: python tools/validate_fences.py --strict-inner
        language: system
        pass_filenames: true
        types: [markdown]
      - id: block-env-files
        name: block committed secret env files
        entry: bash
        language: system
        pass_filenames: false
        always_run: true
        args:
          - -lc
          - |
            while IFS= read -r path; do
              if [ -z "$path" ]; then
                continue
              fi

              base="$(basename "$path")"
              if [ "$base" = ".env.example" ]; then
                continue
              fi

              case "$base" in
                .env|.env.*|.envrc|.envrc.*|*.secret|*.secrets|*.vault)
                  echo "[secrets] refusing to commit $path"
                  echo "Create a local copy from .env.example instead of committing secrets."
                  exit 1
                  ;;
              esac
            done < <(git diff --cached --name-only --diff-filter=ACM)
      - id: codex-block-large-generated
        name: Block large generated files in .codex
        entry: python tools/precommit_block_large.py
        language: system
        pass_filenames: true
      - id: check-licenses
        name: check licenses
        entry: python scripts/check_licenses.py
        language: system
        pass_filenames: false
      - id: ci-guard
        name: Guard against unintended CI workflows
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -lc
          - |
            if [ "${CODEX_ALLOW_CI:-0}" = "1" ]; then
              python tools/ci_guard.py
            else
              echo "[ci-guard] skipped (set CODEX_ALLOW_CI=1 to run)"
            fi
