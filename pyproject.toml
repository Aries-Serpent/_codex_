[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codex-ml"
description = "Codex ML training, evaluation, and plugin framework"
readme = "README.md"
requires-python = ">=3.10"
# Use SPDX expression; suppress Setuptools license table deprecation warnings
license = "MIT"
authors = [
  { name = "Aries Serpent" }
]
keywords = ["ml", "training", "evaluation", "plugins", "hydra", "cli"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Operating System :: OS Independent",
]
# Version may be injected by CI or read dynamically.
# If you keep a __version__ in package, uncomment the next line and remove the explicit version field.
# dynamic = ["version"]
version = "0.1.0"

# Prefer declaring license files explicitly to avoid warnings
[project.license-files]
paths = [
  "LICENSE",
  "LICENSES/*"
]

[project.scripts]
# Canonical entrypoints
codex-train = "codex_ml.cli.entrypoints:train_main"
codex-eval = "codex_ml.cli.entrypoints:eval_main"
codex-list-plugins = "codex_ml.cli.list_plugins:main"
# Preserve legacy/extended scripts present in this repo
codex = "codex.cli:cli"
codex-smoke = "codex_cli.app:app"
codex-import-ndjson = "codex.logging.import_ndjson:main"
codex-ml = "codex_ml.cli.main:cli"
codex-ml-cli = "codex_ml.cli.main:cli"
codex-cli = "codex_ml.cli.simple_cli:main"
codex-generate = "codex_ml.cli.generate:main"
codex-infer = "codex_ml.cli.infer:main"
codex-validate-config = "codex_ml.cli.validate:main"
codex-perf = "codex_ml.perf.bench:main"
codex-ndjson = "codex_utils.cli.ndjson_summary:main"
codex-offline-bootstrap = "codex_ml.cli.offline_bootstrap:main"
fence-check = "tools.validate_fences:main"
hhg-train = "hhg_logistics.main:main"
hhg-serve = "hhg_logistics.serve.app:main"
hhg-serve-smoke = "hhg_logistics.serve.smoke:main"
hhg-monitor-serve = "hhg_logistics.monitor.serve_report:main"
hhg-monitor-data = "hhg_logistics.monitor.data_report:main"
hhg-monitor-snapshot = "hhg_logistics.monitor.snapshot:main"
codex-tokenizer = "tokenization.cli:app"

[tool.setuptools]

[tool.setuptools.package-dir]
"" = "src"
codex_addons = "codex_addons"
codex_digest = "codex_digest"
codex_utils = "codex_utils"
interfaces = "interfaces"
tokenization = "tokenization"
tools = "tools"
training = "training"

[tool.setuptools.packages.find]
where = [".", "src"]
# Include both src/ layout and top-level packages commonly used in this repo
include = [
  "codex_ml*",
  "codex*",
  "tokenization*",
  "training*",
  "codex_utils*",
  "interfaces*",
  "hhg_logistics*",
  "tools*"
]
# Exclude tests and known stubs from packaging
exclude = ["tests*", "torch*"]

[tool.setuptools.package-data]
# Include Jinja templates and Markdown docs if any package needs them at runtime
codex_ml = ["**/*.md", "**/*.jinja2", "**/*.j2"]

[tool.setuptools.exclude-package-data]
codex_ml = ["**/tests/*", "torch/*"]

[project.entry-points."codex_ml.tokenizers"]
hf = "codex_ml.registry.tokenizers:_build_hf_tokenizer"

[project.entry-points."codex_ml.models"]
minilm = "codex_ml.models.registry:_build_minilm"
bert_base_uncased = "codex_ml.models.registry:_build_default_bert"

[project.entry-points."codex_ml.metrics"]
token_accuracy = "codex_ml.metrics.registry:token_accuracy"
ppl = "codex_ml.metrics.registry:perplexity"
exact_match = "codex_ml.metrics.registry:exact_match"
f1 = "codex_ml.metrics.registry:f1"

[project.entry-points."codex_ml.plugins"]
hello = "examples.plugins.hello_plugin:HelloPlugin"
token_accuracy_plugin = "examples.plugins.metrics_token_accuracy_plugin:TokenAccuracyPlugin"

[project.entry-points."codex_ml.data_loaders"]
lines = "codex_ml.data.registry:load_line_dataset"

[project.entry-points."codex_ml.trainers"]
functional = "codex_ml.registry.trainers:_load_functional_trainer"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
addopts = "-q"

[tool.coverage.run]
branch = true
source = ["src/codex_ml"]

[tool.coverage.report]
show_missing = true
skip_covered = true
