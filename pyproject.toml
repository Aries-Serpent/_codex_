[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codex-ml"
description = "Codex ML training, evaluation, and plugin framework"
readme = "README.md"
requires-python = ">=3.10"
# Use SPDX expression; suppress Setuptools license table deprecation warnings
license = "MIT"
authors = [
  { name = "Aries Serpent" }
]
keywords = ["ml", "training", "evaluation", "plugins", "hydra", "cli"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Operating System :: OS Independent",
]
# Ensure runtime dependencies remain declared so console entrypoints import successfully
dependencies = [
  "omegaconf>=2.3",
  "hydra-core==1.3.2",
  "pydantic>=2.4",
  "pydantic-settings>=2.2",
  "pyyaml>=6.0",
  "pandas>=2.1",
  "great_expectations==0.18.7",
  "mlflow>=2.4,<4",
  "transformers>=4.41,<5",
  "peft>=0.11,<1",
  "accelerate>=0.31,<1",
  "datasets>=2.19,<3",
  "lm-eval>=0.4.2,<1",
  "ray[serve]>=2.9,<3",
  "fastapi>=0.110,<1",
  "starlette>=0.27,<0.49",
  "httpx>=0.26,<1",
  "evidently>=0.4.28,<1",
  "numpy>=1.26,<3",
  "scikit-learn>=1.4,<2",
  "duckdb>=0.10",
  "sentencepiece>=0.1.99",
  "torch>=2.1",
  "typer>=0.12",
]

# Version may be injected by CI or read dynamically.
# If you keep a __version__ in package, uncomment the next line and remove the explicit version field.
# dynamic = ["version"]
version = "0.0.0"

[project.optional-dependencies]
analysis = ["libcst>=1.0", "parso>=0.10"]
cli = ["typer>=0.9", "click>=8.1"]
configs = ["hydra-core>=1.3", "omegaconf>=2.3", "PyYAML>=6.0"]
dev = [
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-randomly>=3.15",
  "hypothesis>=6.100",
  "ruff>=0.4",
  "jsonschema>=4.0",
  "black>=24.8",
  "isort>=5.13",
  "mypy>=1.10",
  "dvc==3.0.0",
  "pre-commit>=3.7",
  "nbstripout>=0.6",
  "pytest-mock>=3.14",
]
dist = ["torch>=2.1; platform_system != 'Windows'"]
gpu = ["nvidia-ml-py3>=7.352.0"]
logging = [
  "duckdb>=0.10",
  "jsonschema>=4.18",
  "pandas>=2.0",
  "tensorboard>=2.14",
  "mlflow>=2.11",
  "wandb>=0.16",
]
ml = [
  "datasets>=2.19,<3",
  "peft>=0.11,<1",
  "sentencepiece>=0.1.99",
  "torch>=2.1",
  "transformers>=4.41,<5",
  "accelerate>=0.31,<1",
]
monitoring = ["prometheus-client>=0.14", "psutil>=5.9", "pynvml>=11.5"]
ops = ["requests>=2.31", "PyJWT>=2.8"]
perf = ["numpy>=1.24; python_version<'3.13'", "mlflow>=2.0"]
plugins = ["importlib-metadata; python_version < '3.10'"]
symbolic = ["sentencepiece>=0.1.99", "tokenizers>=0.14"]
test = [
  "pytest>=7.0",
  "pytest-cov>=4.0",
  "hydra-core==1.3.2",
  "hypothesis>=6.100",
]
tokenizer = ["sentencepiece>=0.1.99"]
tokenizers = ["tokenizers>=0.15"]
tracking = ["mlflow>=2.9", "wandb>=0.15"]
train = [
  "torch>=2.1; platform_system != 'Windows'",
  "transformers>=4.41,<5",
  "accelerate>=0.31,<1",
  "peft>=0.11,<1",
  "mlflow>=2.11",
]

# Prefer declaring license files explicitly to avoid warnings
[project.license-files]
paths = [
  "LICENSE",
  "LICENSES/*"
]

[project.scripts]
# Canonical entrypoints
codex-train = "codex_ml.cli.entrypoints:train_main"
codex-eval = "codex_ml.cli.entrypoints:eval_main"
codex-list-plugins = "codex_ml.cli.list_plugins:main"
# Preserve legacy/extended scripts present in this repo
codex = "codex.cli:cli"
codex-smoke = "codex_cli.app:app"
codex-import-ndjson = "codex.logging.import_ndjson:main"
codex-ml = "codex_ml.cli.main:cli"
codex-ml-cli = "codex_ml.cli.main:cli"
codex-cli = "codex_ml.cli.simple_cli:main"
codex-generate = "codex_ml.cli.generate:main"
codex-infer = "codex_ml.cli.infer:main"
codex-validate-config = "codex_ml.cli.validate:main"
codex-perf = "codex_ml.perf.bench:main"
codex-ndjson = "codex_utils.cli.ndjson_summary:main"
codex-offline-bootstrap = "codex_ml.cli.offline_bootstrap:main"
fence-check = "tools.validate_fences:main"
hhg-train = "hhg_logistics.main:main"
hhg-serve = "hhg_logistics.serve.app:main"
hhg-serve-smoke = "hhg_logistics.serve.smoke:main"
hhg-monitor-serve = "hhg_logistics.monitor.serve_report:main"
hhg-monitor-data = "hhg_logistics.monitor.data_report:main"
hhg-monitor-snapshot = "hhg_logistics.monitor.snapshot:main"
codex-tokenizer = "tokenization.cli:app"

[tool.setuptools]

[tool.setuptools.package-dir]
"" = "src"
codex_addons = "codex_addons"
codex_digest = "codex_digest"
codex_utils = "codex_utils"
interfaces = "interfaces"
tokenization = "src/tokenization"
tools = "tools"
training = "src/training"
[tool.setuptools.packages.find]
where = [".", "src"]
include = [
  "codex_ml*",
  "codex*",
  "common*",
  "tokenization*",
  "training*",
  "codex_utils*",
  "interfaces*",
  "hhg_logistics*",
  "hydra_extra*",
  "examples*",
  "security*",
  "tools*"
]
exclude = ["tests*", "torch*"]
[tool.setuptools.package-data]
# Ensure runtime resources remain available in installed wheels
codex_ml = [
  "**/*.md",
  "**/*.jinja2",
  "**/*.j2",
  "configs/**/*.yaml",
]
hhg_logistics = ["conf/**/*.yaml"]
codex_crm = ["cdm/data/**/*.csv"]
common = []

[tool.setuptools.exclude-package-data]
codex_ml = ["**/tests/*", "torch/*"]

[project.entry-points."codex_ml.tokenizers"]
hf = "codex_ml.registry.tokenizers:_build_hf_tokenizer"

[project.entry-points."codex_ml.models"]
minilm = "codex_ml.models.registry:_build_minilm"
bert_base_uncased = "codex_ml.models.registry:_build_default_bert"

[project.entry-points."codex_ml.metrics"]
token_accuracy = "codex_ml.metrics.registry:token_accuracy"
ppl = "codex_ml.metrics.registry:perplexity"
exact_match = "codex_ml.metrics.registry:exact_match"
f1 = "codex_ml.metrics.registry:f1"

[project.entry-points."codex_ml.plugins"]
hello = "examples.plugins.hello_plugin:HelloPlugin"
token_accuracy_plugin = "examples.plugins.metrics_token_accuracy_plugin:TokenAccuracyPlugin"

[project.entry-points."codex_ml.data_loaders"]
lines = "codex_ml.data.registry:load_line_dataset"

[project.entry-points."codex_ml.trainers"]
functional = "codex_ml.registry.trainers:_load_functional_trainer"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
addopts = "-q"

[tool.coverage.run]
branch = true
source = ["src/codex_ml"]

[tool.coverage.report]
show_missing = true
skip_covered = true
