[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codex-ml"
description = "Codex ML training, evaluation, and plugin framework"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
  { name = "Aries Serpent" }
]
keywords = ["ml", "training", "evaluation", "plugins", "hydra", "cli"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
# Ensure runtime dependencies remain declared so console entrypoints import successfully
dependencies = [
  "omegaconf>=2.3",
  "hydra-core==1.3.2",
  "pydantic>=2.4",
  "pydantic-settings>=2.2",
  "pyyaml>=6.0",
  "pandas>=2.1",
  "great_expectations==0.18.7",
  "mlflow>=2.4,<4",
  "transformers>=4.41,<5",
  "peft>=0.11,<1",
  "accelerate>=0.31,<1",
  "datasets>=2.19,<3",
  "lm-eval>=0.4.2,<1",
  "ray[serve]>=2.9,<3",
  "fastapi>=0.110,<1",
  "starlette>=0.27,<0.49",
  "httpx>=0.26,<1",
  "evidently>=0.4.28,<1",
  "numpy>=1.26,<3",
  "scikit-learn>=1.4,<2",
]

# Version may be injected by CI or read dynamically.
# If you keep a __version__ in package, uncomment the next line and remove the explicit version field.
# dynamic = ["version"]
version = "0.0.0"
dependencies = [
  "datasets>=2.16",
  "duckdb>=0.10",
  "hydra-core>=1.3",
  "numpy>=1.24",
  "omegaconf>=2.3",
  "pandas>=2.0",
  "peft>=0.10",
  "PyYAML>=6.0",
  "pydantic>=2.11",
  "pydantic-settings>=2.2",
  "sentencepiece>=0.1.99",
  "torch>=2.1",
  "transformers>=4.30",
  "typer>=0.12",
]

[project.optional-dependencies]
analysis = ["libcst>=1.0", "parso>=0.10"]
configs = ["hydra-core>=1.3", "omegaconf>=2.3", "PyYAML>=6.0"]
logging = ["duckdb>=0.10", "jsonschema>=4.18", "pandas>=2.0"]
ml = [
  "datasets>=2.16",
  "peft>=0.10",
  "sentencepiece>=0.1.99",
  "torch>=2.1",
  "transformers>=4.30",
]
monitoring = ["prometheus-client>=0.14", "psutil>=5.9", "pynvml>=11.5"]
ops = ["requests>=2.31"]
symbolic = ["sentencepiece>=0.1.99", "tokenizers>=0.14"]
tracking = ["mlflow>=2.9", "wandb>=0.15"]

[project.optional-dependencies]
ml = [
  "torch>=2.1; platform_system != 'Windows'",
  "transformers>=4.39",
  "accelerate>=0.27",
  "peft>=0.8",
]
logging = [
  "tensorboard>=2.14",
  "mlflow>=2.11",
  "wandb>=0.16",
]
monitoring = ["psutil>=5.9"]
gpu = ["nvidia-ml-py3>=7.352.0"]
perf = ["numpy>=1.24; python_version<'3.13'", "mlflow>=2.0"]
ops = ["requests>=2.31", "PyJWT>=2.8"]
plugins = [
  "importlib-metadata; python_version < '3.10'",
]
dist = [
  "torch>=2.1; platform_system != 'Windows'",
]
tokenizers = [
  "tokenizers>=0.15",
]
dev = [
  "pytest>=7.4",
  "pytest-cov>=4.1",
  "pytest-randomly>=3.15",
  "hypothesis>=6.100",
  "ruff>=0.4",
  "jsonschema>=4.0",
  "black>=24.8",
  "isort>=5.13",
  "mypy>=1.10",
  "dvc==3.0.0",
  "pre-commit>=3.7",
  "nbstripout>=0.6",
  "pytest-mock>=3.14",
]
tokenizer = ["sentencepiece>=0.1.99"]
train = [
  "torch>=2.1; platform_system != 'Windows'",
  "transformers>=4.39",
  "accelerate>=0.27",
  "peft>=0.8",
  "mlflow>=2.11",
]
test = [
  "pytest>=7.0",
  "pytest-cov>=4.0",
  "hydra-core==1.3.2",
  "hypothesis>=6.100",
]
cli = [
  "typer>=0.9",
  "click>=8.1",
]

[project.scripts]
# Canonical entrypoints aligned with src/codex_ml/cli modules
codex-train = "codex_ml.cli.entrypoints:train_main"
codex-eval = "codex_ml.cli.entrypoints:eval_main"
codex-list-plugins = "codex_ml.cli.list_plugins:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["codex_ml*"]
exclude = []

[tool.setuptools.package-data]
# Include Jinja templates and Markdown docs if any package needs them at runtime
codex_ml = ["**/*.md", "**/*.jinja2", "**/*.j2"]

[tool.setuptools.exclude-package-data]
codex_ml = ["**/tests/*", "torch/*"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
addopts = "-q"

[tool.coverage.run]
branch = true
source = ["src/codex_ml"]

[tool.coverage.report]
show_missing = true
skip_covered = true
