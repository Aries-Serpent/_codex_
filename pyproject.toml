# ----------------------------
# Build system
# ----------------------------
[build-system]
requires = ["setuptools==80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

# ----------------------------
# Project metadata
# ----------------------------
[project]
name = "codex"
description = "Codex utilities and scripts"
readme = "README.md"
requires-python = ">=3.10"
dynamic = ["version"]
authors = [{ name = "Aries-Serpent" }]

# Core runtime deps for all environments.
# IMPORTANT: torch MUST NOT be in base (installed via scripts or extras).
dependencies = [
  # Support both legacy and new Accelerate via runtime shim
  "accelerate==1.10.1",
  "transformers==4.55.4",
  "hydra-core==1.3.2",
  "PyYAML==6.0.2",
]

# ----------------------------
# Optional dependency groups
# ----------------------------
[project.optional-dependencies]
cli = ["typer==0.16.1", "rich==14.1.0"]
tracking = ["mlflow==3.3.2"]
peft = ["peft==0.17.1"]

# Dev tools live here so Codex can opt-in explicitly (or use them locally/CI).
dev = [
  "pytest==8.4.1",
  "pytest-cov==7.0.0",
  "pre-commit==4.0.1",
  "ruff==0.12.7",
  "mypy==1.17.1",
  "nox==2025.5.1",
]

test = [
  "datasets==4.0.0",
  "duckdb==1.3.2",
  "fastapi==0.111.0",
  "hydra-core==1.3.2",
  "httpx==0.28.1",
  "pandas==2.3.2",
  "scikit-learn==1.7.2",
  "peft==0.17.1",
  "transformers==4.55.4",
  "sentencepiece==0.2.1",
  "zstandard==0.24.0",
  "h5py==3.14.0",
]

# CPU group: safe for Codex. In Codex we still explicitly pin the CPU index in scripts
# (uv pip install --index-url https://download.pytorch.org/whl/cpu torch),
# but keeping this group means `uv sync --extra cpu` works outside Codex too.
cpu = [
  "torch==2.8.0 ; python_version >= '3.10'",
]

# GPU group: only for environments that *actually* have CUDA (NOT Codex).
# Outside Codex, install with the proper CUDA index URL, e.g.:
#   pip install --index-url https://download.pytorch.org/whl/cu121 torch==2.8.0
gpu = [
  "torch==2.8.0",
]

# Meta extra (convenience): everything for local development *except* torch.
# Use scripts or cpu/gpu extras for torch itself.
all_dev = [
  "typer==0.16.1",
  "rich==14.1.0",
  "mlflow==3.3.2",
  "peft==0.17.1",
  "pytest==8.4.1",
  "pytest-cov==7.0.0",
  "pre-commit==4.0.1",
  "ruff==0.12.7",
  "mypy==1.17.1",
  "nox==2025.5.1",
  "datasets==4.0.0",
  "duckdb==1.3.2",
  "fastapi==0.111.0",
  "httpx==0.28.1",
  "pandas==2.3.2",
  "scikit-learn==1.7.2",
  "sentencepiece==0.2.1",
  "zstandard==0.24.0",
  "h5py==3.14.0",
]

# ----------------------------
# Entry points / console scripts
# ----------------------------
[project.scripts]
codex-import-ndjson = "codex.logging.import_ndjson:main"
codex-ml-cli = "codex_ml.cli.main:cli"
codex-train = "codex_script:main"
codex-tokenizer = "tokenization.cli:app"
codex-generate = "codex_ml.cli.generate:main"
codex-infer = "codex_ml.cli.infer:main"
codex-validate-config = "codex_ml.cli.validate:main"

[project.entry-points."codex_ml.tokenizers"]
hf = "codex_ml.registry.tokenizers:_build_hf_tokenizer"

[project.entry-points."codex_ml.models"]
minilm = "codex_ml.models.registry:_build_minilm"
bert_base_uncased = "codex_ml.models.registry:_build_default_bert"

[project.entry-points."codex_ml.metrics"]
token_accuracy = "codex_ml.metrics.registry:token_accuracy"
ppl = "codex_ml.metrics.registry:perplexity"
exact_match = "codex_ml.metrics.registry:exact_match"
f1 = "codex_ml.metrics.registry:f1"

[project.entry-points."codex_ml.data_loaders"]
lines = "codex_ml.data.registry:load_line_dataset"

[project.entry-points."codex_ml.trainers"]
functional = "codex_ml.registry.trainers:_load_functional_trainer"

# ----------------------------
# Setuptools package discovery
# ----------------------------
[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["codex*", "tokenization", "hydra_extra"]

[tool.setuptools.package-data]
"codex_ml.configs" = ["**/*.yaml"]

[tool.setuptools.dynamic]
version = { attr = "codex._version.__version__" }

# ----------------------------
# Tooling: Ruff, Black, isort (via Ruff), MyPy
# ----------------------------
[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
# Keep it focused: flake8 (E/F) + import sorting (I)
select = ["E", "F", "I"]
# E501 is superseded by Black's wrapping; keep it ignored to avoid churn
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["codex"]

[tool.black]
line-length = 100
target-version = ["py312"]

# If you prefer Ruff to fully own import sorting, you can delete this block.
[tool.isort]
profile = "black"  # keep isort aligned with Black to avoid formatting churn

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests._codex_introspect"
ignore_errors = true

# ----------------------------
# Coverage / Pytest
# ----------------------------
[tool.coverage.run]
branch = true
parallel = true

# BEGIN: CODEX_PYTEST_COVERAGE
[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=term-missing --cov-report=xml:artifacts/coverage.xml --cov-fail-under=80"
# END: CODEX_PYTEST_COVERAGE
