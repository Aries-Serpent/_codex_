#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Codex Orchestrator: MkDocs docs site + CPU-friendly notebooks + model card template.

Creates/updates:
- mkdocs.yml
- docs/{index.md,getting-started.md,concepts.md,api.md,tutorials/*.md,ops/*.md,safety.md,model_cards/template.md}
- examples/notebooks/{demo_infer.ipynb,demo_train_eval.ipynb}
- docs/requirements.txt (mkdocs pins)

Validation (best-effort):
- pip install -r docs/requirements.txt
- mkdocs build --strict
- optional notebook execution via nbconvert

Policy:
- DO NOT ACTIVATE ANY GitHub Actions online files. ALL validations MUST run within the Codex environment.
"""

from __future__ import annotations

import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

from codex_digest.error_capture import log_error

REPO = Path(__file__).resolve().parents[1]
CODEX = REPO / ".codex"
CODEX.mkdir(parents=True, exist_ok=True)
CHANGE_LOG = CODEX / "change_log.md"
RESULTS = CODEX / "results.md"


def ts() -> str:
    return datetime.utcnow().replace(microsecond=0).isoformat() + "Z"


def log_change(action: str, path: Path, why: str, preview: str = "") -> None:
    if not CHANGE_LOG.exists() or CHANGE_LOG.stat().st_size == 0:
        CHANGE_LOG.write_text("# Codex Change Log\n", encoding="utf-8")
    with CHANGE_LOG.open("a", encoding="utf-8") as fh:
        fh.write(
            f"## {ts()} — {path.relative_to(REPO)}\n- **Action:** {action}\n- **Rationale:** {why}\n"
        )
        if preview:
            fh.write("```text\n" + preview[:4000] + "\n```\n")
        fh.write("\n")


def q5(step: str, err: str, ctx: str) -> None:
    step_no, step_desc = step.split(":", 1) if ":" in step else (step, "")
    log_error(step_no.strip(), step_desc.strip(), err, ctx)


def upsert(path: Path, content: str, sentinel: str) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    if path.exists() and sentinel in path.read_text(encoding="utf-8", errors="ignore"):
        return
    path.write_text(content, encoding="utf-8")
    log_change("upsert", path, f"insert guarded by {sentinel}", content[:4000])


# ---------------- mkdocs.yml ----------------
MK_SENT = "# BEGIN: CODEX_MKDOCS"
MKDOCS = f"""{MK_SENT}
site_name: Codex Docs
site_description: Project documentation (MkDocs Material)
theme:
  name: material
nav:
  - Home: index.md
  - Getting Started: getting-started.md
  - Concepts: concepts.md
  - API Reference: api.md
  - Tutorials:
      - Quickstart (CPU): tutorials/quickstart.md
      - End-to-End (CPU): tutorials/end_to_end_cpu.md
  - Ops:
      - Monitoring: ops/monitoring.md
      - Deployment: ops/deployment.md
  - Safety: safety.md
  - Model Cards:
      - Template: model_cards/template.md
repo_url: https://github.com/OWNER/REPO
strict: true
markdown_extensions:
  - admonition
  - tables
  - toc:
      permalink: true
"""

# ---------------- docs content ----------------
IDX_SENT = "<!-- BEGIN: CODEX_DOCS_INDEX -->"
INDEX_MD = f"""{IDX_SENT}
# Codex Documentation

Welcome! This site covers **Getting Started (Ubuntu)**, **Concepts**, **API Reference**, **Tutorials**, **Ops**, and **Safety**.

> **Note to Codex:** Expand each section based on evolving modules (data loaders, checkpointing, safety, API service).
"""

GS_SENT = "<!-- BEGIN: CODEX_DOCS_GETTING_STARTED -->"
GETTING_STARTED = f"""{GS_SENT}
# Getting Started (Ubuntu)

## Prerequisites
- Python 3.10+
- (Optional) Docker & Docker Compose

## Local Setup

```bash
python -m venv .venv && source .venv/bin/activate
pip install -r docs/requirements.txt
pip install -e .[dev]  # if available
```

Run Docs

```bash
mkdocs serve
```
"""

CON_SENT = "<!-- BEGIN: CODEX_DOCS_CONCEPTS -->"
CONCEPTS = f"""{CON_SENT}
# Concepts

- Data: Streaming JSONL/TXT loaders with validation.
- Checkpointing: Save and resume training with retention policy.
- Safety: Filters (block/allow/regex) and sandboxed execution.
- API: FastAPI service with /train, /infer, /evaluate, /status.
"""

API_SENT = "<!-- BEGIN: CODEX_DOCS_API -->"
API_MD = f"""{API_SENT}
# API Reference (Manual Index)

## HTTP (FastAPI)

- `POST /train` — enqueue background training job; writes artifacts under `/artifacts`.
- `POST /infer` — CPU-friendly inference echo example.
- `POST /evaluate` — metrics placeholder.
- `GET /status` — queue depth and job states.

> **Note:** Link autogenerated docs if OpenAPI is served at `/docs`.
"""

TUT_QS_SENT = "<!-- BEGIN: CODEX_DOCS_TUTORIALS_QUICKSTART -->"
TUT_QS = f"""{TUT_QS_SENT}
# Quickstart (CPU)

1. Start API locally or via Docker Compose.
2. Run `examples/notebooks/demo_infer.ipynb` to call `/infer`.
3. Inspect outputs; no GPU required.
"""

TUT_E2E_SENT = "<!-- BEGIN: CODEX_DOCS_TUTORIALS_END_TO_END -->"
TUT_E2E = f"""{TUT_E2E_SENT}
# End-to-End (CPU)

- Load a small JSONL dataset.
- Simulate training (checkpoints to `output/checkpoints/`).
- Evaluate and report metrics.
- Use `/train` to write artifacts under a mounted volume when containerized.
"""

OPS_MON_SENT = "<!-- BEGIN: CODEX_DOCS_OPS_MONITORING -->"
OPS_MON = f"""{OPS_MON_SENT}
# Monitoring

- Log basic metrics to stdout.
- Collect coverage reports locally.
- For container runs, inspect logs via `docker compose logs -f api`.
"""

OPS_DEP_SENT = "<!-- BEGIN: CODEX_DOCS_OPS_DEPLOYMENT -->"
OPS_DEP = f"""{OPS_DEP_SENT}
# Deployment

See docs/ops/deployment.md for container instructions.

Note: This page acts as a pointer if deployment docs already exist.
"""

SAFE_SENT = "<!-- BEGIN: CODEX_DOCS_SAFETY -->"
SAFETY_MD = f"""{SAFE_SENT}
# Safety

- Blocklist/Allowlist, regex heuristics.
- Logits masking helper.
- Sandboxed subprocess execution (best-effort).
- Limitations and red-team considerations.

> **Note to Codex:** Expand with concrete red-team datasets & tests.
"""

CARD_SENT = "<!-- BEGIN: CODEX_DOCS_MODEL_CARD_TEMPLATE -->"
CARD_TPL = f"""{CARD_SENT}
# Model Card Template

## Intended Use
- Tasks, domains, users.

## Training Data
- Sources, preprocessing, known limitations.

## Evaluation
- Datasets, metrics, results (CPU demo acceptable).

## Ethical Considerations & Safety
- Risks, mitigations, red-team coverage.

## Limitations
- Known failure modes, out-of-scope uses.
"""

REQS_SENT = "# BEGIN: CODEX_DOCS_REQS"
DOC_REQS = f"""{REQS_SENT}
mkdocs==1.6.0
mkdocs-material==9.5.27
nbformat>=5.9
nbconvert>=7.16
"""


# ---------------- example notebooks ----------------


def minimal_notebook(cells: list[dict]) -> str:
    nb = {
        "cells": cells,
        "metadata": {
            "kernelspec": {
                "name": "python3",
                "language": "python",
                "display_name": "Python 3",
            }
        },
        "nbformat": 4,
        "nbformat_minor": 5,
    }
    return json.dumps(nb, indent=2)


NB1 = minimal_notebook(
    [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["# Demo: Inference (CPU)"],
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": None,
            "outputs": [],
            "source": [
                "import json, urllib.request\n",
                "url = 'http://localhost:8000/infer'\n",
                "data = json.dumps({'prompt': 'hello'}).encode('utf-8')\n",
                "req = urllib.request.Request(url, data=data, headers={'Content-Type': 'application/json'})\n",
                "try:\n",
                "    with urllib.request.urlopen(req, timeout=5) as r:\n",
                "        print(r.read().decode('utf-8'))\n",
                "except Exception as e:\n",
                "    print('Warning: API not available; run API first. Error:', e)\n",
            ],
        },
    ]
)

NB2 = minimal_notebook(
    [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["# Demo: Train & Evaluate (CPU)"],
        },
        {
            "cell_type": "code",
            "metadata": {},
            "execution_count": None,
            "outputs": [],
            "source": [
                "from pathlib import Path\n",
                "import json\n",
                "out = Path('output/checkpoints') / 'epoch-1'\n",
                "out.mkdir(parents=True, exist_ok=True)\n",
                "(out / 'weights.bin').write_bytes(b'\x00' * 16)\n",
                "(out / 'config.json').write_text(json.dumps({'epoch': 1}), encoding='utf-8')\n",
                "print('Wrote checkpoint to', out)\n",
                "print('Eval metric (dummy):', {'accuracy': 0.0})\n",
            ],
        },
    ]
)


def apply() -> None:
    try:
        upsert(REPO / "mkdocs.yml", MKDOCS, MK_SENT)
        upsert(REPO / "docs" / "requirements.txt", DOC_REQS, REQS_SENT)
        upsert(REPO / "docs" / "index.md", INDEX_MD, IDX_SENT)
        upsert(REPO / "docs" / "getting-started.md", GETTING_STARTED, GS_SENT)
        upsert(REPO / "docs" / "concepts.md", CONCEPTS, CON_SENT)
        upsert(REPO / "docs" / "api.md", API_MD, API_SENT)
        upsert(REPO / "docs" / "tutorials" / "quickstart.md", TUT_QS, TUT_QS_SENT)
        upsert(REPO / "docs" / "tutorials" / "end_to_end_cpu.md", TUT_E2E, TUT_E2E_SENT)
        mon_path = REPO / "docs" / "ops" / "monitoring.md"
        if not mon_path.exists():
            upsert(mon_path, OPS_MON, OPS_MON_SENT)
        dep_path = REPO / "docs" / "ops" / "deployment.md"
        if not dep_path.exists():
            upsert(dep_path, OPS_DEP, OPS_DEP_SENT)
        upsert(REPO / "docs" / "safety.md", SAFETY_MD, SAFE_SENT)
        upsert(REPO / "docs" / "model_cards" / "template.md", CARD_TPL, CARD_SENT)

        nb_dir = REPO / "examples" / "notebooks"
        nb_dir.mkdir(parents=True, exist_ok=True)
        nb1 = nb_dir / "demo_infer.ipynb"
        if not nb1.exists():
            nb1.write_text(NB1, encoding="utf-8")
            log_change("create", nb1, "CPU-only inference demo", NB1[:4000])
        nb2 = nb_dir / "demo_train_eval.ipynb"
        if not nb2.exists():
            nb2.write_text(NB2, encoding="utf-8")
            log_change("create", nb2, "CPU-only train/eval demo", NB2[:4000])
    except Exception as e:
        q5(
            "3: Best-Effort Construction — write docs & notebooks",
            str(e),
            f"path={REPO}",
        )


def _run(cmd: list[str]) -> tuple[int, str]:
    p = subprocess.run(cmd, capture_output=True, text=True)
    return p.returncode, p.stdout + p.stderr


def validate() -> None:
    with RESULTS.open("a", encoding="utf-8") as fh:
        fh.write(f"\n# Validation {ts()}\n")

        fh.write("\n## Install MkDocs deps\n```\n")
        code, out = _run(
            [sys.executable, "-m", "pip", "install", "-r", "docs/requirements.txt"]
        )
        fh.write(out + f"\n(exit={code})\n```\n")
        if code != 0:
            q5(
                "6: Finalization — install mkdocs deps",
                f"exit {code}",
                "pip install -r docs/requirements.txt",
            )

        fh.write("\n## mkdocs build --strict\n```\n")
        code, out = _run(["mkdocs", "build", "--strict"])
        fh.write(out + f"\n(exit={code})\n```\n")
        if code != 0:
            q5(
                "6: Finalization — mkdocs build",
                f"exit {code}",
                "mkdocs build --strict",
            )

        fh.write("\n## Execute notebooks (optional)\n```\n")
        code_nc, out_nc = _run(
            [sys.executable, "-c", "import nbconvert; print('nbconvert ok')"]
        )
        fh.write(out_nc + f"\n(exit={code_nc})\n")
        if code_nc == 0:
            for nb in [
                "examples/notebooks/demo_infer.ipynb",
                "examples/notebooks/demo_train_eval.ipynb",
            ]:
                code, out = _run(
                    [
                        "jupyter",
                        "nbconvert",
                        "--to",
                        "notebook",
                        "--execute",
                        "--ExecutePreprocessor.timeout=60",
                        nb,
                        "--output",
                        nb,
                    ]
                )
                fh.write(f"$ nbconvert {nb}\n" + out + f"\n(exit={code})\n")
                if code != 0:
                    q5(
                        "6: Finalization — execute notebook",
                        f"exit {code}",
                        nb,
                    )
        else:
            fh.write("nbconvert not available; skipping execution.\n")
        fh.write("```\n")


def main() -> None:
    import argparse

    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--apply",
        action="store_true",
        help="create/augment MkDocs site, docs, notebooks, model card template",
    )
    ap.add_argument(
        "--validate",
        action="store_true",
        help="build docs and optionally execute notebooks (best-effort)",
    )
    args = ap.parse_args()
    if args.apply:
        apply()
    if args.validate:
        validate()
    if not (args.apply or args.validate):
        print("Usage: --apply [--validate]")


if __name__ == "__main__":
    main()
