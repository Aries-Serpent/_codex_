"""
CLI entry points for Zendesk configuration management.

This module exposes commands to snapshot current configuration, compute diffs,
generate plans, apply changes, verify outcomes, rollback, and view metrics.
"""

from __future__ import annotations

import json
from pathlib import Path

import typer
from codex.zendesk.monitoring import register_zendesk_metrics
from codex.zendesk.plan.diff_engine import diff_fields, diff_forms, diff_groups, diff_triggers

app = typer.Typer(help="Manage Zendesk configuration via Codex.")


def _load_json(path: str) -> list[dict] | dict:
    data = json.loads(Path(path).read_text(encoding="utf-8"))
    return data


@app.command()
def snapshot(env: str = typer.Option(..., help="Environment to snapshot")) -> None:
    """Export current Zendesk configuration for the given environment."""

    typer.echo(f"Snapshotting Zendesk configuration for {env}...")
    # TODO: call adapters to fetch current state and write to snapshot directory


@app.command()
def diff(
    resource: str = typer.Argument(
        ..., help="Resource type to diff (triggers, fields, forms, groups)"
    ),
    desired_file: str = typer.Option(..., help="Path to desired state JSON/TOML file"),
    current_file: str = typer.Option(..., help="Path to current state JSON file"),
    output: str | None = typer.Option(None, help="Write diff to file if provided"),
) -> None:
    """Compute diff between desired and current state for a resource."""

    desired_data = _load_json(desired_file)
    current_data = _load_json(current_file)

    if resource == "triggers":
        diffs = diff_triggers(desired_data, current_data)
    elif resource == "fields":
        diffs = diff_fields(desired_data, current_data)
    elif resource == "forms":
        diffs = diff_forms(desired_data, current_data)
    elif resource == "groups":
        diffs = diff_groups(desired_data, current_data)
    else:  # pragma: no cover - validated by Typer choices once extended
        raise typer.BadParameter(f"Unsupported resource type: {resource}")

    diff_json = json.dumps(diffs, indent=2)
    if output:
        Path(output).write_text(diff_json, encoding="utf-8")
        typer.echo(f"Diff written to {output}")
    else:
        typer.echo(diff_json)


@app.command()
def plan(
    resource: str = typer.Argument(..., help="Resource type to plan"),
    diff_file: str = typer.Option(..., help="Diff file generated by `diff` command"),
    output: str | None = typer.Option(None, help="Write plan to file if provided"),
) -> None:
    """Generate a plan from a diff.  In this simplified example, the diff is the plan."""

    plan_data = Path(diff_file).read_text(encoding="utf-8")
    if output:
        Path(output).write_text(plan_data, encoding="utf-8")
        typer.echo(f"Plan written to {output}")
    else:
        typer.echo(plan_data)


@app.command()
def apply(
    plan_file: str = typer.Argument(..., help="Path to plan JSON file"),
    env: str = typer.Option(..., help="Environment to apply changes to"),
) -> None:
    """Apply a previously generated plan to the specified environment."""

    typer.echo(f"Applying plan {plan_file} to {env}...")
    # TODO: implement apply logic using adapters and update monitoring counters


@app.command()
def metrics() -> None:
    """Register Zendesk metrics and display summary."""

    register_zendesk_metrics()
    typer.echo("Zendesk metrics registered.")
    # TODO: display metric values if desired
