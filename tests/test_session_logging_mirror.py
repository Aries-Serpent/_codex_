# Auto-generated by codex_logging_workflow.py
import uuid
import importlib.util
from pathlib import Path

session_logger_path = Path(__file__).resolve().parents[1] / 'codex' / 'logging' / 'session_logger.py'
spec = importlib.util.spec_from_file_location('mirror_session_logger', session_logger_path)
session_logger = importlib.util.module_from_spec(spec)
spec.loader.exec_module(session_logger)
log_event = session_logger.log_event
fetch_messages = session_logger.fetch_messages
get_session_id = session_logger.get_session_id

def test_user_and_assistant_logged_roundtrip(tmp_path, monkeypatch):
    # Use a dedicated session id for isolation
    sid = f"pytest-{uuid.uuid4()}"
    log_event(sid, "user", "hello")
    log_event(sid, "assistant", "world")
    msgs = fetch_messages(sid)
    roles = [m["role"] for m in msgs]
    assert roles == ["user", "assistant"]
    assert msgs[0]["content"] == "hello"
    assert msgs[1]["content"] == "world"
